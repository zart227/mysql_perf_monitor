import re
from core.logger import logger
from datetime import datetime

class Analyzer:
    """
    –ö–ª–∞—Å—Å-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
    –í –±—É–¥—É—â–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
    """
    def __init__(self, metrics, cpu_spikes=None):
        """
        :param metrics: –°–ª–æ–≤–∞—Ä—å —Å —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏ (–≤ —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è).
        :param cpu_spikes: –°–ø–∏—Å–æ–∫ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∏–∫–æ–≤ CPU (–≤ —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è).
        """
        self.metrics = metrics or {}
        self.cpu_spikes = cpu_spikes or []
        self.events = {}
        self.issues = []
        self.recommendations = []
        # –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö.
        self.memory_threshold = 90
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ—Ä–æ–≥–∏ –∑–¥–µ—Å—å
        # self.cpu_threshold = 80

    def analyze(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
        """
        return self.events

    def check_cpu_spikes(self):
        spikes = self.metrics.get('cpu_spikes', [])
        if not spikes:
            return
            
        self.issues.append(f"üî• –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∏–∫–æ–≤ CPU: {len(spikes)}")
        for spike in spikes:
            ts = spike['timestamp']
            cpu = spike['cpu_usage']
            process_line = spike['triggering_process_line']
            processlist = spike['processlist_output']
            
            heavy_query_info = "–Ω–µ –Ω–∞–π–¥–µ–Ω"
            max_time = -1
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º
            spike['heavy_query_info'] = heavy_query_info 
            spike['recommendation_dba'] = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å."
            spike['recommendation_sysadmin'] = "–ü–∏–∫ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ CPU –±—ã–ª –≤—ã–∑–≤–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å–æ–º `mysqld`. –ü—Ä–æ–±–ª–µ–º–∞, –≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."
            spike['vmstat_output'] = self.metrics.get('vmstat', 'N/A')

            for line in processlist.splitlines():
                if 'Query' in line:
                    try:
                        parts = re.split(r'\s+', line.strip())
                        if len(parts) > 7 and parts[4] == 'Query':
                            time_val = int(parts[5])
                            if time_val > max_time:
                                max_time = time_val
                                query_text = ' '.join(parts[7:]).replace('`', '\\`')
                                heavy_query_info = f"–≤—Ä–µ–º—è {time_val}—Å, –∑–∞–ø—Ä–æ—Å: `{query_text}`"
                                
                                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                                spike['recommendation_dba'] = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å, –≤—ã–ø–æ–ª–Ω—è–≤—à–∏–π—Å—è {time_val}—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ–Ω –æ–±—Ä–∞—â–∞–µ—Ç—Å—è. –ó–∞–ø—Ä–æ—Å: `{query_text}`"

                    except (ValueError, IndexError):
                        continue
            
            spike['heavy_query_info'] = heavy_query_info
            self.issues.append(f"  - –í **{ts}** —Å–∫–∞—á–æ–∫ CPU –¥–æ **{cpu}%**. –ü—Ä–æ—Ü–µ—Å—Å: `{process_line}`. –°–∞–º—ã–π –¥–æ–ª–≥–∏–π –∑–∞–ø—Ä–æ—Å: {heavy_query_info}.")
        
        self.recommendations.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∏–∫–∏ CPU. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å –≤ –º–æ–º–µ–Ω—Ç—ã –ø–∏–∫–æ–≤, –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∏—Ö.")

    def check_memory(self):
        free_output = self.metrics.get('free', '')
        if not free_output:
            return
            
        mem_match = re.search(r'Mem:\s+(\d+)\s+(\d+)', free_output)
        if mem_match:
            total = int(mem_match.group(1))
            used = int(mem_match.group(2))
            percent = used / total * 100 if total else 0
            
            if percent > 90:
                logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: {percent:.1f}%")
                if 'memory_events' not in self.metrics:
                    self.metrics['memory_events'] = {}
                
                self.metrics['memory_events']['memory'] = [{
                    'timestamp': datetime.now().strftime('%H:%M:%S'),
                    'usage_percent': f"{percent:.1f}%",
                    'raw_output': free_output,
                    'vmstat_output': self.metrics.get('vmstat', 'N/A'),
                    'recommendation_dba': "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É `innodb_buffer_pool_size`. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç —Ç—é–Ω–∏–Ω–≥–∞.",
                    'recommendation_sysadmin': f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {percent:.1f}%. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ—Ç –ª–∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –ø–æ—Ç—Ä–µ–±–ª—è—é—â–∏—Ö –º–Ω–æ–≥–æ –ø–∞–º—è—Ç–∏. –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ `mysqld`, —Å–∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–π—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ë–î."
                }]
                self.issues.append(f'–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {percent:.1f}%')
                self.recommendations.append('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—ã, —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã innodb_buffer_pool_size.')

    def check_long_queries(self):
        return

    def check_qcache(self):
        qcache = self.metrics.get('qcache_status', '')
        if qcache:
            hits_match = re.search(r'Qcache_hits\s+(\d+)', qcache)
            inserts_match = re.search(r'Qcache_inserts\s+(\d+)', qcache)
            if hits_match and inserts_match:
                hits = int(hits_match.group(1))
                inserts = int(inserts_match.group(1))
                total_queries = hits + inserts
                if total_queries > 0:
                    hit_rate = hits / total_queries
                    if hit_rate < 0.8:
                        self.issues.append(f'–ù–∏–∑–∫–∏–π –∫—ç—à-—Ö–∏—Ç: {hit_rate:.2%}')
                        self.recommendations.append('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ query_cache_size –∏ query_cache_type.') 

    def _find_heavy_query(self, processlist_output):
        """
        –ù–∞—Ö–æ–¥–∏—Ç —Å–∞–º—ã–π "—Ç—è–∂–µ–ª—ã–π" –∑–∞–ø—Ä–æ—Å (–¥–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è)
        –∏–∑ –≤—ã–≤–æ–¥–∞ SHOW FULL PROCESSLIST.
        """
        if not processlist_output:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤."
        
        lines = processlist_output.strip().split('\\n')
        if len(lines) < 2:
            return "–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç."

        processes = []
        header = [h.strip() for h in lines[0].split('\\t')]
        
        try:
            time_col_index = header.index('Time')
            info_col_index = header.index('Info')
        except ValueError:
            return "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ 'Time' –∏–ª–∏ 'Info' –≤ –≤—ã–≤–æ–¥–µ PROCESSLIST."

        for line in lines[1:]:
            if not line.strip(): continue
            parts = [p.strip() for p in line.split('\\t')]
            if len(parts) > max(time_col_index, info_col_index):
                try:
                    time_val = int(parts[time_col_index])
                    info_val = parts[info_col_index]
                    # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ø—è—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
                    if info_val and info_val != 'NULL' and 'sleep' not in parts[header.index('Command')].lower():
                        processes.append({'time': time_val, 'info': info_val})
                except (ValueError, IndexError):
                    continue
        
        if not processes:
            return "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        longest_running = sorted(processes, key=lambda x: x['time'], reverse=True)[0]
        return longest_running['info']

    def _analyze_cpu_spikes(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∏–∫–∏ CPU."""
        if not self.cpu_spikes:
            return

        for spike in self.cpu_spikes:
            heavy_query = self._find_heavy_query(spike.get('processlist_output', ''))
            spike['heavy_query_info'] = heavy_query
            spike['recommendation_dba'] = f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –º–æ–≥ –≤—ã–∑–≤–∞—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É: `{heavy_query}`. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –≤ —ç—Ç–æ–º –∑–∞–ø—Ä–æ—Å–µ."
            spike['recommendation_sysadmin'] = "–ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ CPU –≤—ã–∑–≤–∞–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–º mysqld. –ü—Ä–æ–±–ª–µ–º–∞, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ DBA –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ-–≤–∏–Ω–æ–≤–Ω–∏–∫–µ."
        
        self.events['cpu_spikes'] = self.cpu_spikes

    def _analyze_memory(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏."""
        meminfo_str = self.metrics.get('free', '') # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'free -m' –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
        if not meminfo_str:
            return

        try:
            lines = meminfo_str.strip().split('\\n')
            mem_line = ""
            for line in lines:
                if line.startswith('Mem:'):
                    mem_line = line
                    break
            
            if not mem_line: return

            parts = mem_line.split()
            total = int(parts[1])
            used = int(parts[2])
            usage_percent = (used / total) * 100 if total > 0 else 0

            if usage_percent > 90:
                logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: {usage_percent:.1f}%")
                self.events['memory_events'].append({
                    'usage_percent': f"{usage_percent:.1f}%",
                    'raw_output': self.metrics.get('free', ''),
                    'vmstat_output': self.metrics.get('vmstat', ''),
                    'recommendation_dba': "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É `innodb_buffer_pool_size`. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç —Ç—é–Ω–∏–Ω–≥–∞.",
                    'recommendation_sysadmin': f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {usage_percent:.1f}%. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ—Ç –ª–∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –ø–æ—Ç—Ä–µ–±–ª—è—é—â–∏—Ö –º–Ω–æ–≥–æ –ø–∞–º—è—Ç–∏. –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ `mysqld`, —Å–∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–π—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ë–î."
                })
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–∞–º—è—Ç–∏: {e}", exc_info=True)
        
        self.events['memory_events'] = self.metrics.get('memory_events', []) 